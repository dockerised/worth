
# Uncomment this if IP whitelisting is not taking effect
#LoadBalancerType: proxy_protocol # proxy_protocol is used for IP whitelisting when using NLBs - use `aws elbv2 modify-target-group-attributes --attributes Key=proxy_protocol_v2.enabled,Value=true --target-group-arn arn:aws:elasticloadbalancing:us-east-1:304793330600:targetgroup/eks-cluster-nlb-https-tg-80db4d8/0f41d883eebbc37e`

whitelisting:
  enabled: false
  addresses:
    example: "1.2.3.4/32" # this will allow all

basicAuth:
  enabled: false
  users:
    admin: SomePassWord.

image:
  name: nginx
  tag: 1.22.0
  pullPolicy: IfNotPresent

services:
  - name: "http" # name "http" binds to http listeners 
    containerPort: 80
    hostPort: 80
  - name: "https" # name "https" binds to https listeners 
    containerPort: 443
    hostPort: 443

# Open additional ports to ingress-nginx for raw TCP backends
# extraPorts:
#   - name: "mysql" 
#     containerPort: 3306
#     hostPort: 3306
#   - name: "mysql" 
#     containerPort: 3306
#     nodePort: 300001

confd:
  enabled: false
  # files:
  #   mysite.cogitogroup.co.uk.conf: 
  #     server_name: 
  #     backend_host:
  #     backend_port:
  #     extraServerProperties: |
  #       some_header_val = 10m
  #     extraLocationProperties: |
        

       
confd_inline:
  enabled: false
  # files:
  #   mysite.cogitogroup.co.uk.conf: | 
  #       server {              
  #         listen 80 ;
  #         listen [::]:80 ;
        
  #         root /var/www/html;

  #         server_name localhost;
  #         location / {
  #           root /usr/share/nginx/html;
  #          }
  #       }
       


livenessProbe: 
readinessProbe: 
startupProbe: 

rollingUpdateMaxUnavailable: 1

ssl:
  enabled: false
  