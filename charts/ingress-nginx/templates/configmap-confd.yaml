kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-confd"
  namespace: "{{ .Release.Namespace }}"
data:
  healthz.conf: |
{{ if .Values.confd.enabled }}
{{- range $k, $v := .Values.confd.files }}
{{ $k | indent 2}}: |
    server {
        {{ if $.Values.ssl.enabled }}
        {{- range $value := $.Values.services }}
        {{- if and (not (empty $value)) (eq $value.name "https" ) }}
        listen {{ $value.containerPort }} ssl {{ if eq $.Values.LoadBalancerType "proxy_protocol" }} proxy_protocol {{ end }}; 
        listen [::]:{{ $value.containerPort }} ssl {{ if eq $.Values.LoadBalancerType "proxy_protocol" }} proxy_protocol {{ end }};
        {{- end }}
        {{- end }}
        ssl_certificate /etc/nginx/certs/{{ $v.ssl_ssl_cert_dir_name }}/tls.crt;
        ssl_certificate_key /etc/nginx/certs/{{ $v.cert_dir_name }}/tls.key;
        {{ else }} 
        {{- range $value := $.Values.services }}
        {{- if and (not (empty $value)) (eq $value.name "http" ) }}
        listen {{ $value.containerPort }} {{ if eq $.Values.LoadBalancerType "proxy_protocol" }} proxy_protocol {{ end }};
        listen [::]:{{ $value.containerPort }} {{ if eq $.Values.LoadBalancerType "proxy_protocol" }} proxy_protocol {{ end }};
        {{- end }}
        {{- end }}
        {{ end }}
        server_name    {{ $v.server_name }};
        root /var/www/html;

        
        {{- if and $.Values.basicAuth.enabled $.Values.whitelisting.enabled }}
        # Authentication
        satisfy all;
        {{- end }}
        {{ if $.Values.whitelisting.enabled }}
        {{- range $name, $value := $.Values.whitelisting.addresses }}
        {{- if not (empty $value)  }}
        allow {{ $value | quote }} ; 
        {{- end }}
        {{- end }}
        deny all ;
        {{- end }}
        
        {{ if $v.extraServerProperties}}
        {{ with $v.extraServerProperties}}
        {{ . }}
        {{ end }}
        {{ end }}
        
        {{- if $.Values.basicAuth.enabled }}
        auth_basic           "Employee Area";
        auth_basic_user_file /etc/apache2/.htpasswd; 
        {{- end }}

        client_max_body_size 100m;

        resolver                kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;
        resolver_timeout        5s;

        set $backend "http://{{ $v.backend_host }}:{{ $v.backend_port }}";

        location / {
            {{ if $v.extraLocationPropertiesBegin }}
            {{ with $v.extraLocationPropertiesBegin }}
            {{ . }}
            {{ end }}
            {{ end }}

            proxy_set_header Host $host;
            proxy_pass $backend;
            
            {{ if $v.extraLocationPropertiesFinal }}
            {{ with $v.extraLocationPropertiesFinal }}
            {{ . }}
            {{ end }}
            {{ end }}
        }
    }
{{- end }}
{{ end }}
{{ "" | indent 0 }}
{{- if .Values.confd_inline.enabled }}
{{- if .Values.confd_inline.files }}
{{- range $key, $value := .Values.confd_inline.files }}
  {{ $key }}: |-
{{ $value | indent 4 }}
{{ "" | indent 0 }}
{{- end -}}
{{- end -}}
{{- end -}}